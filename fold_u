#! /usr/bin/env python3
# -*- coding: utf-8 -*-

"""
    Usage:
        ./fold_u QUERY_SEQUENCE_PATH UNIREF_DB [--nb_pdb NUM] [--output PATH] [--nb_psiblast]
                                               [--dssp PATH] [--cpu NUM] [--metafold FILE]
                                               [--dope FILE] [--benchmark FILE]

    Arguments:
        QUERY_SEQUENCE_PATH                   Path to the QUERY sequence to predicted
        UNIREF_DB                             Path to UNIREF90 Database

    Options:
        -h, --help                            Show this
        -t NUM, --nb_psiblast                 Round Number for PSI-BLAST
                                              [default: 3]
        -p NUM, --nb_pdb NUM                  Number of pdb to create
                                              [default: 10]
        -o PATH, --output PATH                Path to the directory containing
                                              the result files (scores and pdb)
                                              [default: ./results]
        -c NUM, --cpu NUM                     Number of cpus to use for parallelisation. By default
                                              using all available (0).
                                              [default: 0]
        -m FILE, --metafold FILE              Path to the metafold.list file
                                              [default: data/metafold.list]
        -d FILE, --dope FILE                  Path to the dope.par file
                                              [default: data/dope.par]
        -b FILE, --benchmark FILE             Path to the benchmark.list file
                                              [default: data/benchmark.list]
"""

# Third-party modules
import subprocess
from multiprocessing import Pool, cpu_count
from functools import partial
from datetime import datetime
from tqdm import tqdm
from docopt import docopt
from schema import Schema, And, Use, SchemaError


def check_args():
    """
        Checks and validates the types of inputs parsed by docopt from command line.
    """
    schema = Schema({
        'QUERY_SEQUENCE_PATH': Use(open, error='QUERY_SEQUENCE_PATH should be readable'),
        'UNIREF_DB': Use(open, error='UNIREF_DB should be readable'),
        '--nb_psiblast': And(Use(int), lambda n: 1<= n <= 10,
                        error='--nb_psiblast shoud be integer 1<= N <= 10'),
        '--metafold': Use(open, error='METAFOLD_FILE should be readable'),
        '--nb_pdb': And(Use(int), lambda n: 1 <= n <= 405,
                        error='--nb_pdb=NUM should be integer 1 <= N <= 405'),
        '--dope': Use(open, error='dope file should be readable'),
        '--benchmark': Use(open, error='BENCHMARK_FILE should be readable'),
        '--cpu': And(Use(int), lambda n: 0 <= n <= cpu_count(),
                     error='--cpus=NUM should be integer 1 <= N <= ' + str(cpu_count())),
        # The output PATH is created (if not exists) at the end of the program
        # so we skip the check.
        object: object})
    try:
        schema.validate(ARGUMENTS)
    except SchemaError as err:
        exit(err)



if __name__ == "__main__":

    START_TIME = datetime.now()

    ######################
    ### Parse command line
    ######################
    ARGUMENTS = docopt(__doc__, version='fold_u 2.0')
    # Check the types and ranges of the command line arguments parsed by docopt
    check_args()

    QUERY_SEQUENCE_PATH = ARGUMENTS["QUERY_SEQUENCE_PATH"]
    QUERY_NAME = QUERY_SEQUENCE_PATH.split("/")[-1].split(".")[0]
    QUERY_PATH = QUERY_SEQUENCE_PATH.split(".")[0]
    NB_PSIBLAST = ARGUMENTS["--nb_psiblast"]
    # Get the alignment file
    UNIREF_DB = ARGUMENTS["UNIREF_DB"]
    # Create the first n pdb templates
    NB_PDB = int(ARGUMENTS["--nb_pdb"])
    # METAFOLD file
    METAFOLD_FILE = ARGUMENTS["--metafold"]
    # DOPE file
    DOPE_FILE = ARGUMENTS["--dope"]
    # BENCHMARK file
    BENCHMARK_FILE = ARGUMENTS["--benchmark"]
    # OUTPUT file
    OUTPUT_PATH = ARGUMENTS["--output"]
    # DSSP path
    DSSP_PATH = ARGUMENTS["--dssp"]
    # Number of cpus for parallelisation
    NB_PROC = cpu_count() if int(ARGUMENTS["--cpu"]) == 0 else int(ARGUMENTS["--cpu"])


    ############################################
    ###1st Step : Run SALUT scrit on Query fasta
    ############################################
    #generate ~ foldrec file
    subprocess.call("./bin/salut_1.0/salut2.sh", stdin=[QUERY_SEQUENCE_PATH, NB_PSIBLAST, UNIREF_DB], shell=True)

    FOLDREC_FILE = QUERY_PATH + ".foldrec"
    ALN_FILE = QUERY_PATH + ".mfasta"

    #######################
    ### Scores calculations
    #######################

    # Parallelization of the main loop
    with Pool(processes=NB_PROC) as pool:
        FUNC = partial(process, DIST_RANGE, DOPE_DICT, OUTPUT_PATH, DSSP_PATH, INDEX_LIST,
                       TOP_COUPLINGS_DICT)
        # tqdm module enables an ETA progress bar for each alignment processed
        # imap_unordered can smooth things out by yielding faster-calculated values
        # ahead of slower-calculated values.
        print("\n\n" + str(cpu_count()) + " cpus detected, using " + str(NB_PROC))
        print("\n\nProcessing alignments ...\n")
        RESULTS = Score([res_ali for res_ali in tqdm(pool.imap_unordered(FUNC,
                                                                         ALIGNMENT_DICT.values()),
                                                     total=len(ALIGNMENT_DICT.values()))])
    # remove useless files generated by MODELLER
    clean_modeller_outputs(OUTPUT_PATH + "/modeller/")

    ### Results : Score and PDB files
    #################################
    RESULTS.write_score(OUTPUT_PATH, NB_PDB, ALIGNMENT_DICT)
    print("\nThe program ended successfully !\nThe results are stored in " + OUTPUT_PATH)
    print("\nTotal runtime: {} seconds".format(str(datetime.now() - START_TIME)))
